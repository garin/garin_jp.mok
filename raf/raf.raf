# creator : garin <garin54@gmail.com>
# publisher: garin.jp
# language: ja
# rights: (c) 2011 garin.jp
# license: CC BY-SA 3.0
# description: raf は作業手順/マニュアル向けの軽量マークアップ言語です
# tag : raf
# date   : 2011-02-26
# update : 2013-11-30
# version: 0.2.0


= raf ドキュメントフォーマット

== はじめに
=== raf とは?
((^raf|らふ^))は純粋なテキスト形式で記述する軽量マークアップフォーマットです。
プログラムのインストールマニュアルやアプリケーションのリファレンスなど、テキストを中心としたドキュメントを記述するために作成されました(この文章自体も raf で書かれています(([raf フォーマット版は http://garin.jp/raf/Software/raf.raf で見ることができます。])))。

構造化ドキュメントで必要な章立てや、箇条書(リスト)・表組み(テーブル)・注釈(フットノート)・振り仮名(ルビ)・画像・ページ内リンク などの機能を標準でサポートしています。
どのような、機能がサポートされているかは、下記の「((<raf リファレンスマニュアル>))」の章を参照してください。

また、raf 形式のファイルを HTML や epub など、他のテキスト形式に変換するためのコマンドラインツールと、ユーザが独自の変換ツールを作成するための Ruby ライブラリを公開しています。

=== raf の特徴

==== 低い学習コスト
raf では HTML/XML のドキュメトタイプの宣言や POD ・ RD の文章開始記号・ Wiki のタイトル(([それぞれ、<!DOCTYPE>、=begin =end、h1. タイトル のような記述が必要です]))など、文章の先頭に特別なおなじないを書く必要はありません。
たとえば次の例は完全に正しい raf フォーマットです。

  この文章は raf のドキュメントです

このように raf を書きはじめるための学習コストは非常に低くなっています。

==== 単語区切りのない言語に適した文字修飾
多くの軽量マークアップは英語圏を中心に開発されています。そのため、英語や多くのヨーロッパ圏の言語のようにスペースで単語を区切る言語に特化しています。
たとえば wiki 記法の1つである textile では、強調文字をスペースで区切られた単語を *(アスタリスク) 囲んで「This is *Strong*」のように記述します。
単語の前後にスペースのある言語ではこのような形式で問題ないですが、日本語のようにスペースで単語区切りを行わない言語で、複数の文字修飾を指定してしまうとどの指定がどの文字を修飾するのかがわかりづらくなってしまいます。
以下に textile で日本語の文を強調する例を示します。

   // textile で日本語の文を強調する
  ...*中心*となる*構造化*ドキュメント*の*作成*に*適して*います。

実は、上の例では開始記号(*)と終了記号(*)の数が正しくないのでエラーになります(どこでエラーになるかわかりますか?)。

そこで raf では2重カッコ "((" と "))" で修飾文字を囲む記法(([Ruby のドキュメント形式として広く使われている RD と同じです]))を採用しています。
さきほどの textile を raf で書き換えると、どこにエラーがあったのかすぐにわかると思います。

  // raf での文字修飾
  ...((*中心*))となる((*構造化*))ドキュメント*))の((*作成*))に((*適して*))います。

「ドキュメント」の前に開始タグがありませんでした。
このように raf は単語区切りのない言語に適した文字修飾の機能を持っています。


# ==== 振り仮名やインラインプログラムのような機能
# raf では他の軽量マークアップではあまりみない機能のいくつかをサポートしています。
# たとえば、振り仮名やインラインプログラムです。
# 振り仮名はその名の通り、漢字や用語に振り仮名(ルビ)を振ります。日本語のドキュメントでは必要になるかもしれません。

==== シンプルなテーブル記法
raf はシンプルなテーブル記法をサポートしています。
ヘッダカラムと通常カラムを作成するだけです。文字列のセンタリングや複数行カラムの機能は提供していません。

raf のテーブルは |(パイプ) で文字列を囲んで(([厳密には終了の|は不要です]))カラムを指定します。ヘッダは |* *| で文字列を囲みます。
次のようなテーブルを記述すると、記述した内容と同じ構造で変換して出力します。

  // raf でのテーブルの記述
  | *ヘッダ1* | *ヘッダ2* |
  | カラム1   | カラム2   |
-
  // HTML に変換した場合の例
  <table>
    <tr>
      <th>ヘッダ1</th><th>ヘッダ2</th>
    </tr>
    <tr>
      <td>カラム1</td><td>カラム2</td>
    </tr>
  </table>

==== raf でできないこと
上では raf の便利な特徴を示しましたが、raf も何でもできる訳ではありません。
raf では以下のことができないかできにくくなっています。

* 外部の raf ファイルのインクルード
* 音楽や動画など、画像以外のマルチメディアファイルの表示
* HTML など他のマークアップ言語の記述
* バイナリデータの埋め込み
* JPEG,PNG や Microsoft Word など バイナリフォーマットへの変換

== 更新履歴
:2011-05-21
  メタデータの type が tag に変更になりました

:2011-04-08
  「((<raf の特徴>))」「((<raf フォーマットサンプル>))」の章を追加

:2011-04-01
  初稿

== raf を使ってみる
raf の仕様を実装した raf パッケージを公開しています。
このパッケージ では、raf フォーマットを HTM などに変換するいくつかのコマンドラインツールと、別のプログラムから raf の機能を呼び出すための Ruby のライブリを提供しています。
また、raf 仕様書でもある racc 文法ファイルも同梱しています。

=== raf のバージョン履歴
:0.1.0 (2013-11-26)
  新たに Ruby-2.0.0 に対応し、Ruby-1.8.x の対応を終了。

:0.0.3 (2011-04-11)
  いくつかの細かい修正(主に誤植)。

:0.0.2 (2011-04-07)
  初公開バージョン

=== インストール
==== raf パッケージのインストール
raf のパッケージ は ((<RubyGems.org|http://rubygems.org>)) で gem パッケージとして公開しています。
rubygems を使える環境であれば gem コマンドでインストールできます。

  $ sudo gem install raf

==== PATH 環境変数の設定
gem コマンドで raf パッケージをインストールすると実行ファイルは /bin:/var/lib/gems/1.8/bin (Ruby1.9.2 の場合は /var/lib/gems/1.9.2/bin/) 以下に配置されます。
必要に応じて ~/.bashrc などにの PATH 環境変数に上記のパスを追加してください。

  $ vi ~/.bashrc
  export PATH=${PATH}:/var/lib/gems/1.8/bin

  $ source .bashrc

+ ソースコードを取得する
最新のソースコードは github で公開しています。
ライセンスは GPLv3 です。
* ((<github: garin / raf |https://github.com/garin/raf>))

以下の手順でソースをダウンロードできます。

   $ git clone https://github.com/garin/raf.git raf

=== 変換コマンド
==== raf2html
raf2html は raf フォーマットのドキュメントファイルを HTML に変換するためのコマンドラインツールです。
上記の gem パッケージかソースコードに同梱されています。

raf2html は raf フォーマットのファイルをわたすと結果を標準出力に出力します。

  $ raf2html hoge.raf
  <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
     "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
  <html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="ja">
    <head>
  ...

+ コマンドオプション
:-h, --help
  ヘルプの表示
:--css file
  スタイルシートのファイルを指定
:-L, --language LANG
  言語を指定(デフォルトは ja 。ドキュメントファイル内で指定されていればそちらを優先)
:--[no-]index
  目次を生成する(デフォルトは生成する)
:-q, --quiet
  本文だけを出力する(ヘッダやフッタは出力しない)

+ 既知のバグ
* ((<インラインスクリプト>))が動きません。

== raf リファレンスマニュアル
この章は raf で使用可能なマークアップのリファレンスです。
raf の文章を書く時などはこのリファレンスを参考にしてください。

※出力例として HTML のコードを掲載していますが、雰囲気を掴むためのもので、HTML への出力が必須であるという意味ではありません。

=== 拡張子・文字コード
:拡張子
  raf フォーマットの拡張子は「.raf」を使用します。
:文字コード
  文字コードは UTF-8 のみをサポートします。EUC や Shift-JIS 等の使用は推奨していません。

=== 段落・改行・コメント
==== 段落
raf フォーマットを、先頭を空白ではなく記号を指定せずに書きはじめると、それは「段落」として扱われます。
段落は、次の空白行か記号付きの行まで続きます。

++ 段落の入力例
  ここは段落です。
  このように続けて書くことができます。

  空白行をあけると次の段落になります。

++ 段落の出力例
  <p>
  ここは段落です。
  このように続けて書くことができます。
  </p>

  <p>
  空白行をあけると次の段落になります。
  </p>

==== 改行
段落内の改行は見た通りのまま改行として扱われます。
HTML の<br />のような特別なマークアップは必要ありません。

++ 入力例
  ここは段落です。
  このように続けて書くことができます。
  文を改行するとそのまま改行して表示されます。

++ 出力例
  <p>
  ここは段落です。<br />
  このように続けて書くことができます。<br />
  文を改行するとそのまま改行して表示されます。<br />
  </p>

==== コメント
行の先頭文字が「#(シャープ)」で始まる行はコメントです。行頭から行末まで1行がコメントになります。
コメントはフォーマット変換ツール(raf2html,raf2epub 等)で別の形式に変換するときに無視されます(([実際にどのような表示になるかは変換ツールに依存します]))。

raf フォーマットのコメントは、行頭ではない場所に「#」があってもそれ以降をコメントとして扱いません(行頭に「#」だけです)。また、行頭がスペースやタブで場合もコメントになりません。

※ 複数行を囲むブロックコメントのフォーマットはありません。

++ コメントの入力例
  # この行はコメントです
  この文章を記述 # ここはコメントではありません
     # 行頭がスペースの場合もコメントになりません

++ コメントの出力例
  <p>
  この文章を記述 # ここはコメントではありません<br />
    # 行頭がスペースの場合もコメントになりません<br />
  </p>

※フォーマットを変換するとコメントは無視されて表示されません。

=== 表題(タイトル)
行の先頭文字が「=」と半角スペースではじまる行は、そのドキュメントの表題(タイトル)です。
表題はファイルの先頭(で((<メタデータ>))の後)に((*1つだけ*))記述できます。
表題は必須の項目ではありませんが、raf のツールでは表題が存在することを前提としているため、記述しておくとよいでしょう。

++ 表題の入力例
  = ドキュメントのタイトル
  ここの文章を記述

※ "=" と タイトル部(ドキュメントのタイトル) の間に半角スペースが必要

++ 表題の出力例
  <h1>ドキュメントのタイトル</h1>
  <p>
  ここの文章を記述
  </p>

+ 表題の優先度
((<文章情報(メタデータ)>))(後述)の subject 項目を記述すると、メタデータの subject を((<表題>))よりも優先して、ドキュメントのタイトルに使用します。その場合、表題(=)のタイトルは一切使われません。
逆に subject を指定しなかった場合は、表題がメタデータの subject としても使われます。

以下に表題と subject の優先度を示します。

| *表題* | *subject* | *変換後のタイトル* | *変換後の subject* |
| あり   | なし      | 表題               | 表題               |
| なし   | あり      | subject            | subject            |
| あり   | あり      | subject            | subject            |


=== 章立て
行頭が2つ以上の「=」と半角スペースではじまる行は章立てになります。
章立ては「==」から「====」までの3段階指定することができ、それぞれ「章(==)」「節(===)」「項(====)」を表わします。

++ 章立ての入力例

  = 表題
  == 第1章
  === 第1章、第1節
  === 第1章、第2節
  ==== 第1章、第2節、第1項
  == 第2章

++ 章立ての出力例
  <h1>表題</h1>
  <h2>1. 第1章</h2>
  <h3>1.1. 第1章、第1節</h3>
  <h3>1.2. 第1章、第2節</h3>
  <h4>1.2.1 第1章、第2節、第1項</h4>
  <h2>2. 第2章</h2>


+ 章立ての規則
章立ては、章→節→項 の順番で正しく指定する必要があります。
以下のように「章」の中で「節」を飛び越えて「項」を記述することはできません。

  # これは間違った書式
  == 第1章
  ==== × 第1章、第1項  # 「節」を飛び越えて「項」を書こうとしているのでエラー

=== 通し番号のない項目
行頭が「+」と半角スペースではじまる行は通し番号のない項目になります。
通し番号のない項目は、章立ての順番に関係なく記述することができます。

++ 通し番号のない項目の入力
  = 表題
  == 第1章
  === 第1章1節
  + 通し番号のない項目

++ 通し番号のない項目の出力
  <h1>表題</h1>
  <h2>1. 第1章</h2>
  <h3>1.1. 第1章1節</h3>
  <h5>通し番号のない項目</h5>

※ raf2html では通し番号のない項目を h5 として扱います。

=== 整形済みテキストの見出し
行頭が「++」と半角スペースではじまる行は整形済みテキストの見出しになります。
下の「((<整形済みテキストの見出し>))」を参照してください。

=== 文字修飾
ドキュメント内の文字を強調したり注釈やリンクを記述するには、以下の文字修飾記法を使います。
文字修飾は 「((」と「))」 のあいだに修飾機能ごとの記号と対象の文字列を入れます。
たとえば強調文字の修飾記号は「*(アスタリスク)」なので (('((*')) と (('*))')) の間に強調したい文字列を記述するとその文字列を強調文字として認識します。(例:(('((*強調文字*))'))

※文字修飾をどのように処理・表示するのかは、変換コマンドによって異ります。
※文字修飾は整形済みテキスト・テーブル(表組み) の中では使用できません。

==== 強調(emphasis)
文字列を強調表示します。注意を促したい場合に使用します。

:記述
  (('((*強調*))'))されると(('((*目立ち*))'))ます
:表示
  ((*強調*))されると((*目立ち*))ます
:HTML
  <b>強調</b>されると<b>目立ち</b>ます

====  斜体(italic)
斜め文字を表示します。
:記述
  (('((_斜体_))'))は文字を(('((_ななめ_))'))にします
:表示
  ((_斜体_))は文字を((_ななめ_))にします
:HTML
  <i>斜体</i>は文字を<i>ななめ</i>にします

==== 否定(strike)
対象文字に否定/訂正線(横線)を引きます。
:記述
  (('((-否定-))'))
:表示
  ((-否定-))
:HTML
  <s>否定</s>

==== 振り仮名(ruby)
漢字や用語に振り仮名(ルビ)を追加します。
左に対象文字、右にルビを「|(パイプ)」で区切って記述します。

:記述
  難しい(('((^漢字|かんじ^))'))
:表示
  難しい((^漢字|かんじ^))
:HTML
  難しい<ruby><rb>漢字</rb><rp>(</rp><rt>かんじ</rt><rp>)</rp></ruby>

==== 注釈(footnote)
文中に注釈を追加します。
:記述
  注釈は変換方法はツールによって異ります(('(([注釈はこのように表示されます]))'))
:表示
  注釈は変換方法はツールによって異ります(([注釈はこのように表示されます]))
:HTML
  注釈は変換方法はツールによって異ります<a href='#raf-footnote-1-reverse'>*1</a>注釈はこのように表示されます

==== 画像(image)
画像ファイルを指定します。
(('(($test.png$))')) => <img src="test.png" />
画像ファイルのパスはドキュメントからの相対パスになります(HTML に変換した場合はその HTML ファイルからの相対パスになるので注意してください)。

((*※*))画像は試験中の仕様です。今後、仕様の変更や破棄の可能性があります。

==== 文字修飾の無効化(verb)
文字修飾を無効にします。文字修飾をしたくない文字列を囲むと文字修飾が無効になり記述したまま表示します。
(他のフォーマットに変換すると無効になってしまうため、便宜上 () を全角で書いています)

:記述
  （（'（（*文字修飾無効*））'））

:表示
  (('((*文字修飾無効*))'))
:HTML
  (('((*文字修飾無効*))'))

==== 文字修飾の入れ子
文字修飾は原則として以下のように入れ子にすることができます(※画像・注釈・ルビは除く)。

++ 文字修飾の入れ子の例
  ((*強調だけ((_強調と斜体_))*)) => <em>強調だけ<i>強調と斜体</i></em>

=== ラベル
ラベルはハイパーテキストのリンクの役割をします。
ファイル内にラベルを作成すると、そのファイル内でのみ有効なラベルとして参照することができます。
また、外部 URL を指定すると通常のハイパーリンクとして動作します。

==== ファイル内ラベルの定義
そのドキュメント内でだけ有効な参照用のラベルを作成します。
作成したラベルは((<ラベルリンク>))を使って参照することができます。

左にラベルの識別子、右にラベルのタイトルを「|(パイプ)」で区切って記述します。
ラベルタイトルがない場合は、識別子をタイトルとして使用します。
ラベル識別子はハッシュ化します。

++ ファイル内ラベルの記述例
  ((>識別子<)) => <a href='#eeOpeeOZeeOrSUQIQ' id='eeOpeeOZeeOrSUQIQ'>識別子</a>
  ((>識別子|タイトル<)) => <a href='#eeOpeeOZeeOrSUQIQ' id='eeOpeeOZeeOrSUQIQ'>タイトル</a>

※表題・章立て・見出しには自動的にラベルが付加されます。

==== ファイル内ラベルの参照(リンク)
「((<ファイル内ラベルの定義>))」で定義したラベルへの参照ポイントを作成します。
左にラベルの識別子、右にラベルのタイトルを「|(パイプ)」で区切って記述します。
ラベルタイトルがない場合は、識別子をタイトルとして使用します。

++ ファイル内ラベル参照の記述例
  ((<識別子>)) => <a href='#eeOpeeOZeeOrSUQIQ'>識別子</a>
  ((<識別子|タイトル>)) => <a href='#eeOpeeOZeeOrSUQIQ'>タイトル</a>

==== 外部 URL リンク
ラベルタイトルが「http://」または「https://」ではじまるリンクは、外部ホストへの URL リンクになります。
++ 外部リンクの記述
  // 外部ページの URI にリンクを貼ります
  ((<http://google.com>)) => <a href="http://google.com">http://google.com</a>

  // 外部ページの URI にリンクを貼り、タイトルをリンクタイトルとして表示します
  ((<Google|http://google.com>)) => <a href="http://google.com">Google</a>

=== 整形済みテキスト
==== 整形済みテキスト
行頭を半角スペースを2つ空けると整形済みテキストになります。
整形済みテキストは、記述された内容をそのまま表示し字修飾も無効にします。
引用やプログラムコードなど記述して文字列をそのまま表示したい時に使用します。

++ 整形済みテキストの入力例
  __これは整形済みテキストです。
  __整形済みテキストは、改行やスペースもそのまま表示します。
  __「    (半角スペース4つ)」
  __((*整形済みテキスト内では文字修飾されません*))
※ 便宜上 「_」 は、半角スペースを表わします。

++ 整形済みテキストの出力例

  <pre>
  これは整形済みテキストです。
  整形済みテキストは、改行やスペースもそのまま表示します。
  「    (半角スペース4つ)」
  ((*整形済みテキスト内では文字修飾されません*))
  </pre>

=== 整形済みテキストの見出し
整形済みテキストの見出しを付けるには 「++」記号を行頭に置きます。
見出しは目次に登録されず整形済みテキストと同じ列にインデントされます。

++ 整形済みテキストの見出しの入力例
  ++ 整形済みテキストの見出し
    上記のタイトルは「整形済みテキストの見出し」です

++ 整形済みテキストの見出しの出力例
  <h6>整形済みテキストの見出し</h6>
  <pre>
  上記のタイトルは「整形済みテキストの見出し」です
  </pre>
※raf2html では スタイルシートで <h6> を整形済みテキストと同じ列にインデントしています。

=== 箇条書き
raf の箇条書きには「記号付き」と「番号付き」の2種類があります。
箇条書きは入れ子にして、階層を深くできます。
((*※*))行頭記号付きと番号付きのリストを複合的に指定することはできません。

==== 記号付き箇条書き
行頭が「*」と半角スペースではじまる行は箇条書きになります。

++ 頭記号付き箇条書きの入力例
  * item1-1
  * item1-2
  # 以下のように入れ子にすることもできます
    * item2-1
      * item3-1

++ 頭記号付き箇条書きの出力
  <ul>
    <li>item1-1</li>
    <li>item1-2
    <ul>
      <li>item2-1
      <ul>
        <li>item3-1</li>
      </ul>
      </li>
    </ul>
    </li>
  </ul>

==== 番号付き箇条書き

行頭に「(N)」まはた「N.」のような半角数字(N は半角数字)と記号の組合せと半角スペースで初まる行は数字付き箇条書きになります。
変換後は N の数字とは関係なく1から順番に添字されます。

++ 番号付き箇条書きの入力例
  (1) number of 1
  (2) number of 2
  (4) number of 4  # 添字を 4 にしても連番の3として処理される

  # 以下の書式も可能
  1. number 1
  2. number 2
  4. number 2

++ 番号付き箇条書きの出力例
どちらの書式でも、以下のように表示されます。
  <ol>
    <li>number of 1</li>
    <li>number of 2</li>
    <li>number of 4</li>
  </ol>

+ 箇条書きの後の改行
箇条書きの後の改行はインデント位置(空白の数)によって意味が異ります。

* 空白がない場合は、その箇条書を終了し、次の段落が続きます。

  // 入力例　
  * aaa
  bbb

  // 出力例
  <ul>
    <li>aaa</li>
  </ul>
  <p>
  bbb
  </p>

* インデント幅が同じ場合は、その箇条書きを継続します。

  // 入力例
  * aaa
    bbb

  // 出力例
  <ul>
    <li>aaa
    bbb</li>
  </ul>

* 空白行がある場合は、整形済みテキストになります。

  // 入力例
  * aaa

    bbb

  // 出力例
  <ul>
    <li>aaa</li>
  </ul>
  <pre>
  bbb
  </pre>

=== 表組み(テーブル)
行頭に「|(パイプ)」のある行は表組み(テーブル)になります。
カラムは「|」で区切ります。「|*」または「| *」で初まるカラムはテーブルヘッダになります。
前後にある半角スペースは無視されます。
必須ではないですが、|と|*は閉じることもできます(カラム末の*と|は無視されます)。

++ 表組みの入力例
  |*ヘッダ1*|*ヘッダ2*|
  |カラム1  |カラム2  |

  または

  | *ヘッダ1 | *ヘッダ2
  | カラム1  | カラム2

++ 表組みの出力例
  <table>
    <tr>
      <th>ヘッダ1</th><th>ヘッダ2</th>
      <td>カラム1</td><td>カラム2</td>
    </tr>
  </table>


=== 定義説明
用語定義の説明などを記述するには、行頭に「:」の後に定義したい語を書き、次の行から半角スペースを2つ以上空けて説明を記述します。
行頭に半角スペースがない行があらわれると定義説明を終了します。

++ 定義説明の入力例

  :用語名
    説明文1       # 説明文は先頭に2行以上の半角スペースを空けます
    説明文2       # 複数行記述できます

++ 定義説明の出力例
  <dl>
    <dt>用語名</dt>
    <dd>
      説明文1       # 説明文は先頭に2行以上の半角スペースを空けます
      説明文2       # 複数行記述できます
    </dd>
  </dl>

=== 文章情報(メタデータ)
ドキュメントファイルの先頭部分をコメントにし、以下に上げる項目名を記述すると、その文章の情報(メタデータ)を設定することができます。
以下の項目を 「# 項目名: 内容」の書式で記述します。
#記述できる項目は epub のメタデータ(([http://www.openebook.org/2007/opf/OPF_2.0_final_spec.html]))を参考にしています。

:creator
  著者。複数指定可。
:subject
  サブジェクト。ドキュメントタイトル。
  「= 」のタイトルとの優先度は「((<表題の優先度>))」を参照。
:description
  ドキュメントの概要説明。
:publisher
  出版社・発行者などドキュメントを公開した組織・個人名
:date
  ドキュメントを公開した日付。YYYY[-MM[-DD]] 形式。
:update
  ドキュメントを更新した日付。YYYY[-MM[-DD]] 形式。
:tag
  タグ。ドキュメントのタグイリスト・カテゴリを指定します。半角スペースで複数指定可。
:identifier
  ドキュメントごとのユニーク ID。指定しなければ変換ツールが自動で付加します
:language
  言語コード。日本語は ja
:rights
  コピーライト
:version
  バージョン番号
:revision
  リビジョン番号
:license
  ライセンス表記

++ メタデータの入力例
メタはファイルの先頭に記述します。先頭以外の場合は通常のコメントとして扱われてしまいます。

  # creator: がりん
  # publisher: garin.jp
  # language: ja
  # tag: プログラム tet リファレンス
  = タイトル

=== インラインスクリプト
raf では (('<%= と %>')) で囲まれた文字列を Ruby のスクリプトとして処理します。
例えば Time.now メソッドを実行すると現在の時刻を出力します。

++ インラインスクリプトの入力例
  このドキュメントの更新時刻: (('<%= Time.now %>'))

++ インラインスクリプトの出力例
  このドキュメントの更新時刻: Wed Apr 01 15:48:21 +0900 2011

※インラインスクリプトは、変換ツールを実行時に((<erb ライブラリ|http://www.ruby-lang.org/ja/man/html/erb.html>))を通して処理します。

# == raf を拡張する
# === 自分用の変換コマンドを定義する
# ==== 既存のコマンドを変更する
# ==== 最初から変換コマンドを定義する

== 付録

=== raf フォーマットサンプル
raf フォーマットのサンプルです。

==== プログラムのインストールマニュアル
  = Apache インストールマニュアル
  == 概要
  === Apache とは?
  ((<Apache HTTPD Server|http://projects.apache.org/projects/http_server.html>))(以下、Apache)は ((<Apache Software Foundation|http://www.apache.org/>)) が作成している オープンソースの HTTPD サーバです。

  == インストール
  Debian 系であれば aptitude、RedHat 系であれば yum を使ってインストールします(([パッケージ名が異なるので注意]))。

    // Debian 系
    # aptitude install apache2

    // RedHat 系
    # yum install httpd

==== ブログ
((<EBS のサイズを変更する方法|http://garin.jp/doc/AmazonEC2/ebs_file_size_chenage>)) の原本です。

  # creator : 我燐(がりん) <garin54@gmail.com>
  # date : 2011-04-01
  # update : 2011-04-04
  # rights: (c) 2011 garin.jp
  # version: 1.0.2
  # publisher: garin.jp
  # tag : ec2 ebs
  = AmazonEC2 で EBS のサイズを変更する方法

  == 概要
  === AmazonEC2 EBS とサイズ変更の問題点
  EBS(Elastic Block Storage)は Amazon EC2 上で使える仮想のディスクボリュームです。
  1GB 単位で最大1TB まで自由な大きさで作成し、通常のディスクボリュームと同じように OS にマウントして使えます。
  ...

  == 移行の準備
  === 新しい EBS ボリュームの作成とアタッチ
  ==== 新しい EBS ボリュームの作成
  まず、データを移行するための新しい EBS を作成します。
  ((<Amazon Management Console|https://console.aws.amazon.com>)) にログイ
  ンし、以下の手順で EBS ボリュームを作成してください。
  ...

==== 小説
  # creator : 夏目漱石
  # date: 1905-X-X
  # publisher: 合資会社ホトトギス社
  = 吾輩は猫である
  == 一
  吾輩((^わがはい^))は猫である。名前はまだ無い。
  どこで生れたかとんと見当((^けんとう^))がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。 ...
  == 二
  吾輩は新年来多少有名になったので、猫ながらちょっと鼻が高く感ぜらるるのはありがたい。
  元朝早々主人の許((^もと^))へ一枚の絵端書((^えはがき^))が来た。これは彼の交友某画家からの年始状であるが、上部を赤、下部を深緑((^ふかみど^))りで塗って、その真中に一の動物が蹲踞((^うずくま^))っているところをパステルで書いてある。

青空文庫「((<吾輩は猫である|http://www.aozora.gr.jp/cards/000148/card789.html>))」より抜粋。

=== 公開されている raf ドキュメント
==== garin.jp
「((<garin.jp:ドキュメント|http://garin.jp>))」の文章はすべて raf フォーマット形式のファイルを公開しています。
raf フォーマット版をダウンロードするには各ドキュメントページの一番下にある[((<raf フォーマット|http://garin.jp/raf/Software/raf.raf>))]というリンクをクリックしてください。

=== 参照情報
+ パッケージ・ソースの配布元
raf のパッケージとソースは以下のサイトで配布しています。
* ソースコード: ((<github : garin/raf|https://github.com/garin/raf>))
* パッケージ: ((<RubyGems : raf|https://rubygems.org/gems/raf/>))
